{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-fetch';\nimport Link from 'next/link';\nimport Layout from '../../components/layout';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\n\nvar fetcher = function fetcher(url) {\n  var res, data;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n          if (!(res.status !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(data.message);\n\n        case 8:\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function Projet() {\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useSWR = useSWR(function () {\n    return query.projet && \"/api/\".concat(query.projet);\n  }, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", null, error.message);\n  if (!data) return __jsx(\"div\", null, \"Loading...\");\n  var titre = data.titre,\n      images = data.images,\n      videos = data.videos,\n      description = data.description,\n      liens = data.liens;\n  return __jsx(Layout, null, __jsx(\"main\", {\n    className: \"projet\"\n  }, __jsx(\"nav\", null, __jsx(\"h1\", null, titre), __jsx(Link, {\n    href: \"/projets\"\n  }, __jsx(\"a\", null, \"Retour aux projets\"))), __jsx(\"div\", null, images.map(function (image) {\n    return __jsx(\"img\", {\n      src: image\n    });\n  }), videos.map(function (video) {\n    return __jsx(\"iframe\", {\n      src: video\n    });\n  }), __jsx(\"h3\", null, \"Description\"), __jsx(\"p\", null, description), liens.length > 0 ? __jsx(React.Fragment, null, liens.map(function (_ref) {\n    var label = _ref.label,\n        data = _ref.data;\n    return __jsx(\"a\", {\n      href: \"data\"\n    }, label);\n  })) : \"\")));\n}","map":null,"metadata":{},"sourceType":"module"}