{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"D:\\\\Documents\\\\GitHub\\\\portfolio\\\\pages\\\\projets\\\\[projet].js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport fetch from 'isomorphic-fetch';\nimport Link from 'next/link';\nimport Layout from '../../components/layout';\nimport useSWR from 'swr';\nimport { useRouter } from 'next/router';\n\nvar fetcher = function fetcher(url) {\n  var res, data;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(url));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n\n          if (!(res.status !== 200)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(data.message);\n\n        case 8:\n          return _context.abrupt(\"return\", data);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default function Projet() {\n  var _this = this;\n\n  var _useRouter = useRouter(),\n      query = _useRouter.query;\n\n  var _useSWR = useSWR(function () {\n    return query.id && \"/api/\".concat(query.id);\n  }, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }\n  }, error.message);\n  if (!data) return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, __jsx(\"main\", {\n    className: \"projet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }, __jsx(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 21\n    }\n  }, titre), __jsx(Link, {\n    href: \"/projets\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, __jsx(\"a\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 25\n    }\n  }, \"Retour aux projets\"))), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, images.map(function (image) {\n    return __jsx(\"img\", {\n      src: image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 36\n      }\n    });\n  }), videos.map(function (video) {\n    return __jsx(\"iframe\", {\n      src: video,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 36\n      }\n    });\n  }), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, \"Description\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }, description), liens.length > 0 ? __jsx(React.Fragment, null, liens.map(function (_ref) {\n    var label = _ref.label,\n        data = _ref.data;\n    return __jsx(\"a\", {\n      href: \"data\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 45\n      }\n    }, label);\n  })) : \"\")));\n}","map":{"version":3,"sources":["D:/Documents/GitHub/portfolio/pages/projets/[projet].js"],"names":["fetch","Link","Layout","useSWR","useRouter","fetcher","url","res","json","data","status","Error","message","Projet","query","id","error","titre","images","map","image","videos","video","description","liens","length","label"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACMN,KAAK,CAACM,GAAD,CADX;;AAAA;AACNC,UAAAA,GADM;AAAA;AAAA,2CAEOA,GAAG,CAACC,IAAJ,EAFP;;AAAA;AAENC,UAAAA,IAFM;;AAAA,gBAIRF,GAAG,CAACG,MAAJ,KAAe,GAJP;AAAA;AAAA;AAAA;;AAAA,gBAKF,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CALE;;AAAA;AAAA,2CAOLH,IAPK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAUA,eAAe,SAASI,MAAT,GAAkB;AAAA;;AAAA,mBAEXT,SAAS,EAFE;AAAA,MAErBU,KAFqB,cAErBA,KAFqB;;AAAA,gBAGLX,MAAM,CAC1B;AAAA,WAAMW,KAAK,CAACC,EAAN,mBAAoBD,KAAK,CAACC,EAA1B,CAAN;AAAA,GAD0B,EAE1BV,OAF0B,CAHD;AAAA,MAGrBI,IAHqB,WAGrBA,IAHqB;AAAA,MAGfO,KAHe,WAGfA,KAHe;;AAQ7B,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,KAAK,CAACJ,OAAZ,CAAP;AACX,MAAI,CAACH,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,SAAS,EAAC,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKQ,KADL,CADJ,EAII,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAJJ,CADJ,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,MAAM,CAACC,GAAP,CAAW,UAACC,KAAD,EAAW;AAClB,WAAO;AAAK,MAAA,GAAG,EAAEA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,CAFR,EAOQC,MAAM,CAACF,GAAP,CAAW,UAACG,KAAD,EAAW;AAClB,WAAO;AAAQ,MAAA,GAAG,EAAEA,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH,GAFD,CAPR,EAWI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXJ,EAYI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIC,WAAJ,CAZJ,EAeQC,KAAK,CAACC,MAAN,GAAe,CAAf,GACI,4BAEQD,KAAK,CAACL,GAAN,CAAU,gBAAmB;AAAA,QAAjBO,KAAiB,QAAjBA,KAAiB;AAAA,QAAVjB,IAAU,QAAVA,IAAU;AACzB,WACI;AAAG,MAAA,IAAI,EAAC,MAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBiB,KAAhB,CADJ;AAGH,GAJD,CAFR,CADJ,GAWI,EA1BZ,CAXJ,CADJ,CADJ;AA+CH","sourcesContent":["import fetch from 'isomorphic-fetch';\r\nimport Link from 'next/link'\r\nimport Layout from '../../components/layout'\r\nimport useSWR from 'swr'\r\nimport { useRouter } from 'next/router'\r\n\r\nconst fetcher = async url => {\r\n    const res = await fetch(url)\r\n    const data = await res.json()\r\n\r\n    if (res.status !== 200) {\r\n        throw new Error(data.message)\r\n    }\r\n    return data\r\n}\r\n\r\nexport default function Projet() {\r\n\r\n    const { query } = useRouter()\r\n    const { data, error } = useSWR(\r\n        () => query.id && `/api/${query.id}`,\r\n        fetcher\r\n    )\r\n\r\n    if (error) return <div>{error.message}</div>\r\n    if (!data) return <div>Loading...</div>\r\n\r\n    return(\r\n        <Layout>\r\n            <main className=\"projet\">\r\n                <nav>\r\n                    <h1>\r\n                        {titre}\r\n                    </h1>\r\n                    <Link href=\"/projets\">\r\n                        <a>\r\n                            Retour aux projets\r\n                        </a>\r\n                    </Link>\r\n                </nav>\r\n                <div>\r\n                    {\r\n                        images.map((image) => {\r\n                            return <img src={image}/>\r\n                        })\r\n                    }\r\n                    {\r\n                        videos.map((video) => {\r\n                            return <iframe src={video}/>\r\n                        })\r\n                    }\r\n                    <h3>Description</h3> \r\n                    <p>{description}</p>\r\n\r\n                    {\r\n                        liens.length > 0 ? (\r\n                            <>\r\n                                {\r\n                                    liens.map(({label, data}) => {\r\n                                        return (\r\n                                            <a href=\"data\">{label}</a>\r\n                                        )   \r\n                                    })\r\n                                }\r\n                            </>\r\n                        ):(\r\n                            \"\"\r\n                        )\r\n                    }\r\n                </div>\r\n                \r\n            </main>\r\n        </Layout>\r\n    ) \r\n}"]},"metadata":{},"sourceType":"module"}